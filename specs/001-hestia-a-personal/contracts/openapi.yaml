openapi: 3.0.3
info:
  title: Hestia Gateway API
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /services/{serviceId}/{proxyPath}:
    parameters:
      - in: path
        name: serviceId
        required: true
        schema:
          type: string
      - in: path
        name: proxyPath
        required: true
        schema:
          type: string
        style: simple
        explode: false
    get:
      summary: Transparent proxy GET to service path
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Proxied response
    post:
      summary: Transparent proxy POST to service path
      security:
        - ApiKeyAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Proxied response
    put:
      summary: Transparent proxy PUT to service path
      security:
        - ApiKeyAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Proxied response
    patch:
      summary: Transparent proxy PATCH to service path
      security:
        - ApiKeyAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Proxied response
    delete:
      summary: Transparent proxy DELETE to service path
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Proxied response
  /v1/requests:
    post:
      summary: Dispatch a client HTTP request through Hestia to a target service
      description: |
        Transparent gateway endpoint. If the target service is inactive, Hestia queues the request until the service
        is healthy (per FR-012) and then forwards it. May take longer when cold-starting.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayRequest'
      responses:
        '200':
          description: Proxied response from target service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayResponse'
        '4XX':
          description: Client error
        '5XX':
          description: Server error or startup failure after retries/fallbacks
  /v1/services/{serviceId}/start:
    post:
      summary: Proactively start a service
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Start initiated
        '409':
          description: Already starting or running
  /v1/services/{serviceId}/status:
    get:
      summary: Get service status and readiness
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Current status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    GatewayRequest:
      type: object
      required: [serviceId, method, path]
      properties:
        serviceId:
          type: string
        method:
          type: string
          example: GET
        path:
          type: string
          example: /v1/models
        headers:
          type: object
          additionalProperties:
            type: string
        body:
          nullable: true
    GatewayResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        headers:
          type: object
          additionalProperties:
            type: string
        body:
          nullable: true
    ServiceStatus:
      type: object
      properties:
        serviceId:
          type: string
        state:
          type: string
          enum: [hot, cold, starting, stopping]
        machineId:
          type: string
        readiness:
          type: string
          enum: [ready, not_ready]
